nextflow_process {
    name "Test Process MIDAS"
    script "../main.nf"
    process "MIDAS"
    
    test("midas - with built database") {
        setup {
            run ("UNTAR") {
                script "../../../../../../nf-core/untar/main.nf"
                process {
                    """
                    input[0] = [
                        [id:'db'],
                        [file('https://github.com/snayfach/MIDAS/raw/refs/heads/master/test/genomes.tar.gz', checkIfExists:true)]
                    ]
                    """
                }
            }
            run ("MIDAS_BUILD") {
                script "../../build/main.nf"
                process {
                    """
                    input[0] = UNTAR.out.untar
                        .combine(
                            Channel.of(
                                file('https://github.com/snayfach/MIDAS/raw/refs/heads/master/test/genomes.mapfile', checkIfExists:true)
                            )
                        )
                    """
                }
            }
        }
        when {
            process {
                """
                input[0] = [
                    [id:'test_sample'],
                    file(params.pipelines_testdata_base_path + 'genomics/prokaryotes/bacteroides_fragilis/illumina/fastq/test1_1.fastq.gz', checkIfExists:true),
                    file(params.pipelines_testdata_base_path + 'genomics/prokaryotes/bacteroides_fragilis/illumina/fastq/test1_2.fastq.gz', checkIfExists:true)
                ]
                input[1] = MIDAS_BUILD.out.database.map { meta, db -> db }
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert process.out.species_profile },
                { assert process.out.log_file },
                { assert process.out.primary_genus_file },
                { assert process.out.secondary_genus_file },
                { assert process.out.secondary_genus_coverage_file },
                { assert process.out.secondary_genus_abundance_file },
                { assert process.out.versions }
            )
        }
    }
    
    test("midas - stub") {
        options '-stub'
        when {
            process {
                """
                input[0] = [
                    [id:'test_sample'],
                    file(params.pipelines_testdata_base_path + 'genomics/prokaryotes/bacteroides_fragilis/illumina/fastq/test1_1.fastq.gz', checkIfExists:true),
                    file(params.pipelines_testdata_base_path + 'genomics/prokaryotes/bacteroides_fragilis/illumina/fastq/test1_2.fastq.gz', checkIfExists:true)
                ]
                input[1] = []
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}