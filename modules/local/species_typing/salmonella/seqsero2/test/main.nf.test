nextflow_process {
    name "Test Process SEQSERO2"
    script "../main.nf"
    process "SEQSERO2"

    test("SEQSERO2 - assembly") {
        setup {
            run("GUNZIP") {
                script "../../../../../nf-core/gunzip/main.nf"
                process {
                    """
                    input[0] = [
                        [id:'test_sample'],
                        file('https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/006/945/GCF_000006945.2_ASM694v2/GCF_000006945.2_ASM694v2_genomic.fna.gz', checkIfExists: true)
                    ]
                    """
                }
            }
        }
        when {
            process {
                """
                input[0] = GUNZIP.out.gunzip
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.report,
                    process.out.antigenic_profile,
                    process.out.serotype,
                    process.out.note,
                    process.out.versions
                ).match() }
            )
        }
    }

    test("SEQSERO2 - reads paired-end") {
        when {
            process {
                """
                input[0] = Channel.of([
                    [ id:'test_sample' ],
                    [
                        file(params.pipelines_testdata_base_path + "genomics/prokaryotes/bacteroides_fragilis/illumina/fastq/test1_1.fastq.gz", checkIfExists: true),
                        file(params.pipelines_testdata_base_path + "genomics/prokaryotes/bacteroides_fragilis/illumina/fastq/test1_2.fastq.gz", checkIfExists: true)
                    ]
                ])
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.report,
                    process.out.antigenic_profile,
                    process.out.serotype,
                    process.out.contamination,
                    process.out.note,
                    process.out.versions
                ).match() }
            )
        }
    }

    test("SEQSERO2 - stub") {
        options "-stub"
        when {
            process {
                """
                input[0] = Channel.of([
                    [ id:'test_sample' ],
                    file('https://raw.githubusercontent.com/denglab/SeqSero2/refs/heads/master/seqsero2_db/H_and_O_and_specific_genes.fasta', checkIfExists: true)
                ])
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}