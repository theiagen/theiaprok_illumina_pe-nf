nextflow_process {
    name "Test Process NGMASTER"
    script "../main.nf"
    process "NGMASTER"

    test("NGMASTER - test") {
        setup {
            run("GUNZIP") {
                script "../../../../../nf-core/gunzip/main.nf"
                process {
                    """
                    input[0] = [
                        [id:'test_sample'],
                        file('https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/019/048/825/GCF_019048825.1_ASM1904882v1/GCF_019048825.1_ASM1904882v1_genomic.fna.gz', checkIfExists: true)
                    ]
                    """
                }
            }
        }
        when {
            process {
                """
                input[0] = GUNZIP.out.gunzip
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.report,
                    process.out.ngmast_sequence_type,
                    process.out.ngmast_porb_allele,
                    process.out.ngmast_tbpb_allele,
                    process.out.ngstar_sequence_type,
                    process.out.ngstar_pena_allele,
                    process.out.ngstar_mtrr_allele,
                    process.out.ngstar_porb_allele,
                    process.out.ngstar_pona_allele,
                    process.out.ngstar_gyra_allele,
                    process.out.ngstar_parc_allele,
                    process.out.ngstar_23s_allele,
                    process.out.versions
                ).match() }
            )
        }
    }

    test("NGMASTER - stub") {
        options "-stub"
        when {
            process {
                """
                input[0] = Channel.of([
                    [ id:'test_sample' ],
                    file(params.modules_testdata_base_path + 'genomics/prokaryotes/escherichia_coli/genome/genome.fa.gz', checkIfExists: true)
                ])
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}